// <auto-generated />
using System;
using FishingEventsApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FishingEvents.Infrastructure.Migrations
{
    [DbContext(typeof(FishingEventsDbContext))]
    [Migration("20241109085330_SeedRole")]
    partial class SeedRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2eff85cf-8402-45f8-bb3b-88bbafcc50d2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4aca01ef-0489-4624-a5ce-f385b9899355",
                            Email = "admin@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEPw/tOUSBVKYi3OMlRGpjc4AsNkvp7dtmlPJoUgYUNqllYgak3F4Dvz3jB2JgFPP3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20bd82f2-9239-4f48-9aac-0108710b8802",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = "8c148075-961f-4ddc-bdb2-416c5bfa1439",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1487a63-7cec-4b67-9d9b-7f7908bcba4b",
                            Email = "user1@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Dave",
                            LastName = "Marciano",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@ABV.BG",
                            NormalizedUserName = "USER1@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEF+A2b7vRNMjksFGD7jRaa5DEkZj/5nZH/Zv8GBU5tZHnMzt6kJSCFMWmW7/WJUaXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06ddb7a4-4e0c-44bb-9c53-e36ff9e79f64",
                            TwoFactorEnabled = false,
                            UserName = "user1@abv.bg"
                        },
                        new
                        {
                            Id = "ef082de5-9f29-4f11-adb4-a337f90e3373",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bffe47d-7069-4fc5-9019-0c176797188b",
                            Email = "user2@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Tyler",
                            LastName = "McLaughlin",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@ABV.BG",
                            NormalizedUserName = "USER2@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEFLcdtG1NAwQKzatH6jmi+YUBOrKB+0Wtj3A6aaPSMNIkQ2X3KnGitsjgawR7qQQZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42e0603f-6863-42a1-9f78-1ca3ecd430fd",
                            TwoFactorEnabled = false,
                            UserName = "user2@abv.bg"
                        },
                        new
                        {
                            Id = "5667e464-5a99-44f1-81cd-6e9022965a07",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c89e7fc-058a-490c-b115-dbe235450f16",
                            Email = "user3@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "TJ",
                            LastName = "Ott",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@ABV.BG",
                            NormalizedUserName = "USER3@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAECoak0V1x2aBwrcCTiJD7jTGPcU9wExbes4fD/5g6b52imvylvJ8KBAHnxW8P/UU2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45af59a8-789f-4042-a3d2-3d932b2d4220",
                            TwoFactorEnabled = false,
                            UserName = "user3@abv.bg"
                        });
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.EventParticipant", b =>
                {
                    b.Property<int>("FishingEventId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FishingEventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.FishCaught", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("FishCaught identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CaughtImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCaught")
                        .HasColumnType("datetime2");

                    b.Property<int>("FishingEventId")
                        .HasColumnType("int");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FishingEventId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("FishCaughts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaughtImageUrl = "https://targetwalleye.com/wp-content/uploads/2019/11/Jake-Caughey-winnipeg-manitoba-target-walleye-greenback_edited-1.jpg",
                            DateCaught = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishingEventId = 1,
                            Length = 0.5,
                            SpeciesId = 1,
                            UserId = "f22d4414-0146-4947-8aa8-4b5179bc0160",
                            Weight = 0.25
                        },
                        new
                        {
                            Id = 2,
                            CaughtImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQeJp8v1JFGqRH1BLyOwv-48FlCGg4kwxyN-VFvtYnxvUbzVAh_VaTjBjf7xGipUG4K_c4&usqp=CAU",
                            DateCaught = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishingEventId = 1,
                            Length = 0.90000000000000002,
                            SpeciesId = 2,
                            UserId = "f22d4414-0146-4947-8aa8-4b5179bc0160",
                            Weight = 1.45
                        },
                        new
                        {
                            Id = 19,
                            CaughtImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT_TKag7a673r_RBIcKFqIe-_6BjB6Oob4nqw&s",
                            DateCaught = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishingEventId = 11,
                            Length = 2.25,
                            SpeciesId = 9,
                            UserId = "ef082de5-9f29-4f11-adb4-a337f90e3373",
                            Weight = 350.0
                        });
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.FishingEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key for the organizer of the event");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("FishingEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Join us for a day of fishing and fun!",
                            EndDate = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventImageUrl = "https://baileysharbor.com/wp-content/uploads/2023/03/BH-Brown-Trout-23-Logo-1.jpg",
                            EventName = "Spring Fishing Festival",
                            IsCompleted = false,
                            LocationId = 1,
                            OrganizerId = "f22d4414-0146-4947-8aa8-4b5179bc0160",
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Join us for a cold day of fishing and fun!",
                            EndDate = new DateTime(2024, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventImageUrl = "https://img.freepik.com/premium-vector/fishing-tournament-logo-template-isolated_384468-27.jpg",
                            EventName = "Winter Fishing Festival",
                            IsCompleted = false,
                            LocationId = 2,
                            OrganizerId = "f22d4414-0146-4947-8aa8-4b5179bc0160",
                            StartDate = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Description = "Join us for Atlantic bluefin tuna!",
                            EndDate = new DateTime(2024, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventImageUrl = "https://play-lh.googleusercontent.com/TphogImhoiplJ6NBslILTd1eko8KCWb-NDirph-RcoMSiga-v-8YfVZWddAvhLwbVSjBJg",
                            EventName = "Wicked Tuna",
                            IsCompleted = false,
                            LocationId = 8,
                            OrganizerId = "8c148075-961f-4ddc-bdb2-416c5bfa1439",
                            StartDate = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.LeaderBoard", b =>
                {
                    b.Property<int>("FishingEventId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalFishCaught")
                        .HasColumnType("int");

                    b.Property<double>("TotalWeight")
                        .HasColumnType("float");

                    b.HasKey("FishingEventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LeaderBoards");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Elevation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FishingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocationImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Elevation = "250",
                            FishingType = "Trolling,Jigging",
                            LocationImageUrl = "https://svetogled.com/wp-content/uploads/2021/05/DSC_0680-800x500.jpg",
                            Name = "Mihalkovo"
                        },
                        new
                        {
                            Id = 2,
                            Elevation = "1400",
                            FishingType = "Soft Plastic Lures,Float",
                            LocationImageUrl = "https://4u-luxury-villa.com/wp-content/uploads/2022/10/Dospat.jpg",
                            Name = "Dospat"
                        },
                        new
                        {
                            Id = 8,
                            Elevation = "2",
                            FishingType = "Live bait",
                            LocationImageUrl = "https://photos.smugmug.com/Aerials/Massachusetts/Gloucester-MA-aerial-photos/i-z7TrSmq/2/LDpDV5CVDMk29PnCDcbvDK6PsqDJVQwXPwCxvTfGF/L/_MG_9999%20-%20Version%202-L.jpg",
                            Name = "Gloucester,Massachusetts"
                        });
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FishBait")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FishImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HabitatName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "They are generally silvery white in color and most have dark horizontal lines along their sides.",
                            FishBait = "lures, live bait, spinner baits, jig bait",
                            FishImageUrl = "https://www.graytaxidermy.com/images/large-fishmount-photos/large-mouth-bass-silo.jpg",
                            HabitatName = "Lakes or shallow bays of larger lakes.",
                            Name = "Bass"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Trout have fins entirely without spines, and all of them have a small adipose fin along the back, near the tail.",
                            FishBait = "lures, live bait, spinner baits, jig bait,camola",
                            FishImageUrl = "https://images.squarespace-cdn.com/content/v1/5be9e00d5b409b36bd17e36f/a9b6dce2-17eb-4c9c-9755-78cff2f43c87/Dorado+%28Mahi+Mahi%29+Coryphaena+Hippurus.jpeg",
                            HabitatName = "Trout need cold water to survive.",
                            Name = "Trout"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Atlantic bluefin tuna have large, torpedo-shaped bodies that are nearly circular in cross-section.",
                            FishBait = "Live bait",
                            FishImageUrl = "https://images.squarespace-cdn.com/content/v1/5890c07bcd0f685b13dc60bf/1490802646283-GBTVAD6YM4G07UWVZJ12/image-asset.png",
                            HabitatName = "Near offshore islands",
                            Name = "Atlantic bluefin tuna"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a5f38997-71be-4d64-b6b8-0e741de5d2b5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e6c4f4e6-5f17-4a65-bfb7-64f6a33d5128",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2eff85cf-8402-45f8-bb3b-88bbafcc50d2",
                            RoleId = "a5f38997-71be-4d64-b6b8-0e741de5d2b5"
                        },
                        new
                        {
                            UserId = "8c148075-961f-4ddc-bdb2-416c5bfa1439",
                            RoleId = "e6c4f4e6-5f17-4a65-bfb7-64f6a33d5128"
                        },
                        new
                        {
                            UserId = "ef082de5-9f29-4f11-adb4-a337f90e3373",
                            RoleId = "e6c4f4e6-5f17-4a65-bfb7-64f6a33d5128"
                        },
                        new
                        {
                            UserId = "5667e464-5a99-44f1-81cd-6e9022965a07",
                            RoleId = "e6c4f4e6-5f17-4a65-bfb7-64f6a33d5128"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.EventParticipant", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.FishingEvent", "FishingEvent")
                        .WithMany("EventParticipants")
                        .HasForeignKey("FishingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("EventParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishingEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.FishCaught", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.FishingEvent", "FishingEvent")
                        .WithMany("FishCaughts")
                        .HasForeignKey("FishingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingEvents.Infrastructure.Data.Models.Species", "Species")
                        .WithMany("FishCaughts")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("FishCaughts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishingEvent");

                    b.Navigation("Species");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.FishingEvent", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.Location", "Location")
                        .WithMany("FishingEvents")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", "Organizer")
                        .WithMany("FishingEvents")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.LeaderBoard", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.FishingEvent", "FishingEvent")
                        .WithMany("LeaderBoards")
                        .HasForeignKey("FishingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("LeaderBoards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishingEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("EventParticipants");

                    b.Navigation("FishCaughts");

                    b.Navigation("FishingEvents");

                    b.Navigation("LeaderBoards");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.FishingEvent", b =>
                {
                    b.Navigation("EventParticipants");

                    b.Navigation("FishCaughts");

                    b.Navigation("LeaderBoards");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.Location", b =>
                {
                    b.Navigation("FishingEvents");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.Species", b =>
                {
                    b.Navigation("FishCaughts");
                });
#pragma warning restore 612, 618
        }
    }
}
