// <auto-generated />
using System;
using FishingEventsApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FishingEvents.Infrastructure.Migrations
{
    [DbContext(typeof(FishingEventsDbContext))]
    partial class FishingEventsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User's first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User's last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2eff85cf-8402-45f8-bb3b-88bbafcc50d2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff623c4c-5aae-4ee1-9a51-5de93a329332",
                            Email = "admin@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtm8Gqa9XVM/KfzCCEup1cIpXsm88h1uyzu4nPJQT+0uNiCF/bbOPeMLgnGPQDdfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abe2b93c-2ff7-4af7-bcf4-c43d03d9fea7",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = "8c148075-961f-4ddc-bdb2-416c5bfa1439",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7cd607da-ea9b-4f06-acd3-1b3bd2b26c43",
                            Email = "user1@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Dave",
                            LastName = "Marciano",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@ABV.BG",
                            NormalizedUserName = "USER1@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEE3grZUvHWWfjSGkoQ0q1U6EH0O4xal9YULxyP/VmPP6mOqGRDpx0MxFmhiKTYqrQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74521359-6d6e-405d-8a07-e9814eb098eb",
                            TwoFactorEnabled = false,
                            UserName = "user1@abv.bg"
                        },
                        new
                        {
                            Id = "ef082de5-9f29-4f11-adb4-a337f90e3373",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06721c84-745f-4a20-968d-74faab7ed380",
                            Email = "user2@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Tyler",
                            LastName = "McLaughlin",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@ABV.BG",
                            NormalizedUserName = "USER2@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEL54/o3WDDWGgPRzpJlYcli7coVTsLKDxTQfGQqS3wIl/7A1Gmy16ycDjSofF/gBSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fd776de-3c17-4426-b381-71f76b9e0c03",
                            TwoFactorEnabled = false,
                            UserName = "user2@abv.bg"
                        },
                        new
                        {
                            Id = "5667e464-5a99-44f1-81cd-6e9022965a07",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea80835c-70b2-4dce-864f-0dc85739dccc",
                            Email = "user3@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "TJ",
                            LastName = "Ott",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@ABV.BG",
                            NormalizedUserName = "USER3@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEMosCPH5qnOx+c9uH+9nEvHZ9nzjuoeiH8pv4SfVbwU0T9Qe8lLGYm5aAqbr0UUEuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cf77433-4979-45ee-bf05-c22cbc410264",
                            TwoFactorEnabled = false,
                            UserName = "user3@abv.bg"
                        },
                        new
                        {
                            Id = "a7dded57-50b8-4c59-8148-619b8d2a1266",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d67da72-eb21-4dcc-a725-6e19c1b56a55",
                            Email = "user4@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Dave",
                            LastName = "Carraro",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@ABV.BG",
                            NormalizedUserName = "USER4@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEEeoHc28ZKlIFK85cHO6lMiQa4QX8hfBdKNoErGMRdKP/FqOcJRjLhlw3+opfaVV4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46d04109-906a-45db-88bb-c7cc930b41c0",
                            TwoFactorEnabled = false,
                            UserName = "user4@abv.bg"
                        },
                        new
                        {
                            Id = "e1f8b74c-9b90-4054-ab42-8171c32ed1b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0042d6d-650d-42f1-a2ea-c4ab8a4cd459",
                            Email = "user5@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Paul",
                            LastName = "Hebert",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@ABV.BG",
                            NormalizedUserName = "USER5@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEBb/NuWFQOiSMUl+6PZfv2wiyPz/a06Yli0ewTtHq942U2JjN88IBkWvoa7rZGrsxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e156f47a-6162-4efd-aa00-9f0e4e27c7ba",
                            TwoFactorEnabled = false,
                            UserName = "user5@abv.bg"
                        },
                        new
                        {
                            Id = "f0c1090f-ba41-4420-8446-26f4efb810f1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "749c3621-28ac-4293-8247-e93cea7b7fbb",
                            Email = "globaladmin@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Global",
                            LastName = "Global",
                            LockoutEnabled = false,
                            NormalizedEmail = "GLOBALADMIN@ABV.BG",
                            NormalizedUserName = "GLOBALADMIN@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAECI4UtQT7+Vhr/vpB+VP6oOEJeFqbICipiesXMqWEoqOzglXrc5bfB+8cGM5hg0IvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b553c47-c8bd-4f23-a5d8-110d9d4788bd",
                            TwoFactorEnabled = false,
                            UserName = "globaladmin@abv.bg"
                        });
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key identifier for the Comment");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The unique identifier for the author of the comment.");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The text content of the comment.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the comment was created.");

                    b.Property<int>("FishingEventId")
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the fishing event to which this comment is associated.");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FishingEventId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "a7dded57-50b8-4c59-8148-619b8d2a1266",
                            CommentText = "Great fish!",
                            CreatedOn = new DateTime(2024, 11, 23, 13, 7, 31, 883, DateTimeKind.Local).AddTicks(3062),
                            FishingEventId = 3
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "8c148075-961f-4ddc-bdb2-416c5bfa1439",
                            CommentText = "Thanks!!!",
                            CreatedOn = new DateTime(2024, 11, 23, 13, 7, 31, 883, DateTimeKind.Local).AddTicks(3112),
                            FishingEventId = 3
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = "ef082de5-9f29-4f11-adb4-a337f90e3373",
                            CommentText = "How much does it weigh?",
                            CreatedOn = new DateTime(2024, 11, 23, 13, 7, 31, 883, DateTimeKind.Local).AddTicks(3114),
                            FishingEventId = 3
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = "8c148075-961f-4ddc-bdb2-416c5bfa1439",
                            CommentText = "1200 pounds(540 kg)",
                            CreatedOn = new DateTime(2024, 11, 23, 13, 7, 31, 883, DateTimeKind.Local).AddTicks(3116),
                            FishingEventId = 3
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = "ef082de5-9f29-4f11-adb4-a337f90e3373",
                            CommentText = "Whoooa!",
                            CreatedOn = new DateTime(2024, 11, 23, 13, 7, 31, 883, DateTimeKind.Local).AddTicks(3118),
                            FishingEventId = 3
                        });
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.EventParticipant", b =>
                {
                    b.Property<int>("FishingEventId")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the associated FishingEvent");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key referencing the participating user");

                    b.HasKey("FishingEventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventParticipants");

                    b.HasData(
                        new
                        {
                            FishingEventId = 3,
                            UserId = "8c148075-961f-4ddc-bdb2-416c5bfa1439"
                        },
                        new
                        {
                            FishingEventId = 3,
                            UserId = "ef082de5-9f29-4f11-adb4-a337f90e3373"
                        },
                        new
                        {
                            FishingEventId = 3,
                            UserId = "a7dded57-50b8-4c59-8148-619b8d2a1266"
                        },
                        new
                        {
                            FishingEventId = 4,
                            UserId = "e1f8b74c-9b90-4054-ab42-8171c32ed1b2"
                        },
                        new
                        {
                            FishingEventId = 4,
                            UserId = "5667e464-5a99-44f1-81cd-6e9022965a07"
                        });
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.FishCaught", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key identifier for FishCaught entry");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CaughtImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("URL of the image showing the caught fish (optional)");

                    b.Property<DateTime>("DateCaught")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the fish was caught");

                    b.Property<int>("FishingEventId")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the associated FishingEvent");

                    b.Property<double>("Length")
                        .HasColumnType("float")
                        .HasComment("Length of the fish caught in the specified measurement unit");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the Species of the fish caught");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key referencing the User who caught the fish");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasComment("Weight of the fish caught in the specified measurement unit");

                    b.HasKey("Id");

                    b.HasIndex("FishingEventId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("FishCaughts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaughtImageUrl = "https://www.looper.com/img/gallery/facts-about-wicked-tunas-dave-marciano-you-wont-have-to-fish-for/a-1200-pound-bluefin-tuna-was-his-largest-catch-1666893399.jpg",
                            DateCaught = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishingEventId = 3,
                            Length = 230.0,
                            SpeciesId = 3,
                            UserId = "8c148075-961f-4ddc-bdb2-416c5bfa1439",
                            Weight = 544.0
                        },
                        new
                        {
                            Id = 2,
                            CaughtImageUrl = "https://www.pressherald.com/wp-content/uploads/sites/4/2013/04/portland-press-herald_3753041.jpg?w=800",
                            DateCaught = new DateTime(2024, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishingEventId = 3,
                            Length = 195.0,
                            SpeciesId = 3,
                            UserId = "a7dded57-50b8-4c59-8148-619b8d2a1266",
                            Weight = 207.0
                        },
                        new
                        {
                            Id = 3,
                            CaughtImageUrl = "https://media.distractify.com/brand-img/6Eeo0qnci/0x0/tyler-marissa-wicked-tuna-1559414259195.jpg",
                            DateCaught = new DateTime(2024, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishingEventId = 3,
                            Length = 212.0,
                            SpeciesId = 3,
                            UserId = "ef082de5-9f29-4f11-adb4-a337f90e3373",
                            Weight = 207.0
                        },
                        new
                        {
                            Id = 4,
                            CaughtImageUrl = "https://a57.foxnews.com/static.foxnews.com/foxnews.com/content/uploads/2020/03/1200/675/TheFleetStrikesBack_WickedTuna_Ep707_LR_18.jpg?ve=1&tl=1",
                            DateCaught = new DateTime(2024, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishingEventId = 3,
                            Length = 208.0,
                            SpeciesId = 3,
                            UserId = "8c148075-961f-4ddc-bdb2-416c5bfa1439",
                            Weight = 230.0
                        },
                        new
                        {
                            Id = 5,
                            CaughtImageUrl = "https://www.howtocatchanyfish.com/uploads/8/8/0/2/8802125/cuda2_orig.jpg",
                            DateCaught = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishingEventId = 4,
                            Length = 172.0,
                            SpeciesId = 5,
                            UserId = "5667e464-5a99-44f1-81cd-6e9022965a07",
                            Weight = 41.0
                        },
                        new
                        {
                            Id = 6,
                            CaughtImageUrl = "https://alphonsefishingco.com/wp-content/uploads/2023/06/seychelles-alphonse-island-species-barracuda-06.jpg",
                            DateCaught = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishingEventId = 4,
                            Length = 191.0,
                            SpeciesId = 5,
                            UserId = "e1f8b74c-9b90-4054-ab42-8171c32ed1b2",
                            Weight = 52.0
                        });
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.FishingEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key identifier for the FishingEvent");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description of the fishing event");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the event ends");

                    b.Property<string>("EventImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("URL of an image representing the event (optional)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the fishing event");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasComment("Indicates whether the event has been completed");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the event location");

                    b.Property<string>("OrganizerId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key referencing the Organizer of the event");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the event starts");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("FishingEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Join us for a day of fishing and fun!",
                            EndDate = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventImageUrl = "https://baileysharbor.com/wp-content/uploads/2023/03/BH-Brown-Trout-23-Logo-1.jpg",
                            EventName = "Spring Fishing Festival",
                            IsCompleted = false,
                            LocationId = 1,
                            OrganizerId = "e1f8b74c-9b90-4054-ab42-8171c32ed1b2",
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Join us for a cold day of fishing and fun!",
                            EndDate = new DateTime(2024, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventImageUrl = "https://img.freepik.com/premium-vector/fishing-tournament-logo-template-isolated_384468-27.jpg",
                            EventName = "Winter Fishing Festival",
                            IsCompleted = false,
                            LocationId = 2,
                            OrganizerId = "2eff85cf-8402-45f8-bb3b-88bbafcc50d2",
                            StartDate = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Join us for Atlantic bluefin tuna!",
                            EndDate = new DateTime(2024, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventImageUrl = "https://play-lh.googleusercontent.com/TphogImhoiplJ6NBslILTd1eko8KCWb-NDirph-RcoMSiga-v-8YfVZWddAvhLwbVSjBJg",
                            EventName = "Wicked Tuna",
                            IsCompleted = false,
                            LocationId = 3,
                            OrganizerId = "8c148075-961f-4ddc-bdb2-416c5bfa1439",
                            StartDate = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "Go to Ionian sea",
                            EndDate = new DateTime(2024, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventImageUrl = "https://static.vecteezy.com/system/resources/thumbnails/023/059/722/small_2x/design-of-barracuda-fishing-vector.jpg",
                            EventName = "Catching Big Barracudas",
                            IsCompleted = false,
                            LocationId = 6,
                            OrganizerId = "ef082de5-9f29-4f11-adb4-a337f90e3373",
                            StartDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Description = "Big Catfish in Ebro river",
                            EndDate = new DateTime(2024, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSLtFBYwC0pUKQmDLimBxIa2V3e8pZ50diWlON8SJtbqMTqvdWu0juQI9vuo-PxMZVySdE&usqp=CAU",
                            EventName = "Catching Catfish",
                            IsCompleted = false,
                            LocationId = 4,
                            OrganizerId = "f0c1090f-ba41-4420-8446-26f4efb810f1",
                            StartDate = new DateTime(2024, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key identifier for the location");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Elevation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Elevation of the location");

                    b.Property<string>("FishingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Type of fishing available at this location");

                    b.Property<string>("LocationImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Optional URL of an image representing the location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the location");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Elevation = "250",
                            FishingType = "Trolling,Jigging",
                            LocationImageUrl = "https://svetogled.com/wp-content/uploads/2021/05/DSC_0680-800x500.jpg",
                            Name = "Mihalkovo"
                        },
                        new
                        {
                            Id = 2,
                            Elevation = "1400",
                            FishingType = "Soft Plastic Lures,Float",
                            LocationImageUrl = "https://4u-luxury-villa.com/wp-content/uploads/2022/10/Dospat.jpg",
                            Name = "Dospat"
                        },
                        new
                        {
                            Id = 3,
                            Elevation = "2",
                            FishingType = "Live bait",
                            LocationImageUrl = "https://photos.smugmug.com/Aerials/Massachusetts/Gloucester-MA-aerial-photos/i-z7TrSmq/2/LDpDV5CVDMk29PnCDcbvDK6PsqDJVQwXPwCxvTfGF/L/_MG_9999%20-%20Version%202-L.jpg",
                            Name = "Gloucester,Massachusetts"
                        },
                        new
                        {
                            Id = 4,
                            Elevation = "124",
                            FishingType = "Live bait,Frog lure",
                            LocationImageUrl = "https://www.iberdrolaespana.com/documents/2692041/3701769/cuenca-ebro-cantabrico-746x419.png/c49350ea-0723-6b45-e37a-49a404380b06?t=1701255674149",
                            Name = "Velilla de Ebro,Spain"
                        },
                        new
                        {
                            Id = 5,
                            Elevation = "1",
                            FishingType = "Lure",
                            LocationImageUrl = "https://mediaim.expedia.com/destination/1/66f2da633e3df0ef6cefdc10aefc3c1f.jpg",
                            Name = "Kefalonia,Poros"
                        },
                        new
                        {
                            Id = 6,
                            Elevation = "1",
                            FishingType = "Lure,Live bait",
                            LocationImageUrl = "https://theinsidetraveller.com/wp-content/uploads/2024/03/dji_fly_20230723_135658_518_1690174403398_photo-1.jpg?w=1024",
                            Name = "Lefkada"
                        });
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key identifier for the species");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description of the species");

                    b.Property<string>("FishBait")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("The type of bait typically used to catch this species");

                    b.Property<string>("FishImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Optional URL of an image representing the species");

                    b.Property<string>("HabitatName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The habitat name where the species is typically found");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the species");

                    b.HasKey("Id");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "They are generally silvery white in color and most have dark horizontal lines along their sides.",
                            FishBait = "lures, live bait, spinner baits, jig bait",
                            FishImageUrl = "https://www.graytaxidermy.com/images/large-fishmount-photos/large-mouth-bass-silo.jpg",
                            HabitatName = "Lakes or shallow bays of larger lakes.",
                            Name = "Bass"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Trout have fins entirely without spines, and all of them have a small adipose fin along the back, near the tail.",
                            FishBait = "lures, live bait, spinner baits, jig bait,camola",
                            FishImageUrl = "https://media.istockphoto.com/id/1491004547/vector/watercolor-rainbow-trout-hand-drawn-fish-illustration-isolated-on-white-background.jpg?s=612x612&w=0&k=20&c=HgyqU9_bg_ytNEIiFclu1oNnnoc44PmUc_vvMF4FEbo=",
                            HabitatName = "Trout need cold water to survive.",
                            Name = "Trout"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Atlantic bluefin tuna have large, torpedo-shaped bodies that are nearly circular in cross-section.",
                            FishBait = "Live bait",
                            FishImageUrl = "https://images.squarespace-cdn.com/content/v1/5890c07bcd0f685b13dc60bf/1490802646283-GBTVAD6YM4G07UWVZJ12/image-asset.png",
                            HabitatName = "Near offshore islands",
                            Name = "Atlantic bluefin tuna"
                        },
                        new
                        {
                            Id = 4,
                            Description = "large spindle-shaped body",
                            FishBait = "Worms,Minnows and Small Fish",
                            FishImageUrl = "https://cdn.shopify.com/s/files/1/2527/6546/files/brown_bullhead_480x480.jpg?v=1618523580",
                            HabitatName = "Slow-flowing and swampy bodies of water",
                            Name = "Catfish"
                        },
                        new
                        {
                            Id = 5,
                            Description = "The fish has a long, slender body that is tapered at the ends and thicker in the middle.",
                            FishBait = "Live bait,Lure",
                            FishImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQf4kpsp3YY-spyzPn86Mhq0MXFyMzHhdtYQmrDdXVcL5nNdQbVi2yt-ZBpdmqZtPXHmA&usqp=CAU",
                            HabitatName = "Seagrass beds, mangroves, and coral reefs.",
                            Name = "Barracuda"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Perch have a long and round body shape which allows for fast swimming in the water.",
                            FishBait = "Jig,Lure,Worms",
                            FishImageUrl = "https://portal.ct.gov/-/media/deep/fishing/freshwater/freshwater_fishes/perches-and-darters/74ayellowperchacompressed.jpg?rev=9152b888941e4650bc94dd51c0b713e3&sc_lang=en&hash=F3D205D82079E5FAA26D6BB0FE116D86q=tbn:ANd9GcSsxP5wYue8ZxzOp8mTJTMUe5pN6O0AC_NPhw&s",
                            HabitatName = "Freshwater ponds, lakes, streams, or rivers.",
                            Name = "Perch"
                        },
                        new
                        {
                            Id = 7,
                            Description = "The common carp is a heavy-bodied minnow with barbels on either side of the upper jaw.",
                            FishBait = "Sweetcorn,Boilies,Pellets",
                            FishImageUrl = "https://badangling.com/wp-content/uploads/2018/06/common-carp-species.jpg",
                            HabitatName = "Still or slowly flowing waters at low altitudes.",
                            Name = "Carp"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a5f38997-71be-4d64-b6b8-0e741de5d2b5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e6c4f4e6-5f17-4a65-bfb7-64f6a33d5128",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "d1d7ca33-a54c-4ea0-b96e-6ca509a57ec1",
                            Name = "GlobalAdmin",
                            NormalizedName = "GLOBALADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2eff85cf-8402-45f8-bb3b-88bbafcc50d2",
                            RoleId = "a5f38997-71be-4d64-b6b8-0e741de5d2b5"
                        },
                        new
                        {
                            UserId = "8c148075-961f-4ddc-bdb2-416c5bfa1439",
                            RoleId = "e6c4f4e6-5f17-4a65-bfb7-64f6a33d5128"
                        },
                        new
                        {
                            UserId = "ef082de5-9f29-4f11-adb4-a337f90e3373",
                            RoleId = "e6c4f4e6-5f17-4a65-bfb7-64f6a33d5128"
                        },
                        new
                        {
                            UserId = "5667e464-5a99-44f1-81cd-6e9022965a07",
                            RoleId = "e6c4f4e6-5f17-4a65-bfb7-64f6a33d5128"
                        },
                        new
                        {
                            UserId = "a7dded57-50b8-4c59-8148-619b8d2a1266",
                            RoleId = "e6c4f4e6-5f17-4a65-bfb7-64f6a33d5128"
                        },
                        new
                        {
                            UserId = "e1f8b74c-9b90-4054-ab42-8171c32ed1b2",
                            RoleId = "e6c4f4e6-5f17-4a65-bfb7-64f6a33d5128"
                        },
                        new
                        {
                            UserId = "f0c1090f-ba41-4420-8446-26f4efb810f1",
                            RoleId = "d1d7ca33-a54c-4ea0-b96e-6ca509a57ec1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.Comment", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FishingEvents.Infrastructure.Data.Models.FishingEvent", "FishingEvent")
                        .WithMany("Comments")
                        .HasForeignKey("FishingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("FishingEvent");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.EventParticipant", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.FishingEvent", "FishingEvent")
                        .WithMany("EventParticipants")
                        .HasForeignKey("FishingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("EventParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishingEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.FishCaught", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.FishingEvent", "FishingEvent")
                        .WithMany("FishCaughts")
                        .HasForeignKey("FishingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingEvents.Infrastructure.Data.Models.Species", "Species")
                        .WithMany("FishCaughts")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("FishCaughts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishingEvent");

                    b.Navigation("Species");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.FishingEvent", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.Location", "Location")
                        .WithMany("FishingEvents")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", "Organizer")
                        .WithMany("FishingEvents")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FishingEvents.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("EventParticipants");

                    b.Navigation("FishCaughts");

                    b.Navigation("FishingEvents");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.FishingEvent", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("EventParticipants");

                    b.Navigation("FishCaughts");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.Location", b =>
                {
                    b.Navigation("FishingEvents");
                });

            modelBuilder.Entity("FishingEvents.Infrastructure.Data.Models.Species", b =>
                {
                    b.Navigation("FishCaughts");
                });
#pragma warning restore 612, 618
        }
    }
}
